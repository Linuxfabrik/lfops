- block:

  - ansible.builtin.debug:
      msg:
        - 'Combined Users:'
        - '{{ login__users__combined_var }}'

  - name: 'Get list of required groups'
    ansible.builtin.set_fact:
      login__required_groups: '{{ ((login__users__combined_var | selectattr("state", "defined") | selectattr("state", "ne", "absent") | map(attribute="additional_groups", default="None"))
            + (login__users__combined_var | selectattr("state", "undefined") | map(attribute="additional_groups", default="None"))) | flatten | unique }}'

  - ansible.builtin.debug:
      msg:
        - 'Required Groups:'
        - '{{ login__required_groups }}'

  - name: 'Create the required groups'
    ansible.builtin.group:
      name: '{{ item }}'
      state: 'present'
      local: true # this is required for servers which are using FreeIPA, for example
    loop: '{{ login__required_groups }}'

  - name: 'Create the user with the given groups and a home directory'
    ansible.builtin.user:
      append: false
      create_home: true
      group: '{{ item["primary_group"] | d(omit) }}'
      groups: '{{ item["additional_groups"] | d([]) }}'
      home: '{{ item["home"] | d(omit) }}'
      name: '{{ item["name"] }}'
      # `d(None)` is used to check if item["password"] is set.
      # the ternary does not do lazy evaluation, so both the true and false statement are evaluated.
      # therefore, `d()` is needed so that `password_hash()` does not fail,
      # even though the result is not used in the end
      password: '{{ (item["password"] | d(None)) | ternary(
            (
              item["password"] | d()
              | password_hash("sha512", (65534 | random(seed=inventory_hostname) | string))
            ), omit)
          }}'
      remove: true #  only affects `state=absent`
      shell: '{{ item["shell"] | d(omit) }}'
      state: '{{ item["state"] | d("present") }}'
      system: '{{ item["system"] | d(false) }}'
    loop: '{{ login__users__combined_var }}'
    loop_control:
      label: '{{ item["name"] }}'

  - name: 'Set up authorized keys'
    ansible.posix.authorized_key:
      user: '{{ item["name"] }}'
      state: 'present'
      key: "{{ item['sshd_authorized_keys'] | d([]) | join('\n') }}" # do not swap quotes - else \n will be used literally
      exclusive: '{{ item["remove_other_sshd_authorized_keys"] | d(false) }}'
    when: 'item["state"] | d("present") == "present"'
    loop: '{{ login__users__combined_var }}'
    loop_control:
      label: '{{ item["name"] }}'

  - name: 'Allow "{{ login__passwordless_sudo_group }}" group to have password-less sudo'
    community.general.sudoers:
      name: 'lfops_login'
      group: '{{ login__passwordless_sudo_group }}'
      commands: 'ALL'
      runas: 'ALL' # allow switching to any other user
      nopassword: true
      state: 'present'
    when: 'login__passwordless_sudo_group is defined and login__passwordless_sudo_group | length'

  tags:
    - 'login'
