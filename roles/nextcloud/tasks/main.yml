- block:

  - name: 'Install bzip2 jq openldap-clients samba-client'
    ansible.builtin.package:
      name:
        - 'bzip2'
        - 'jq'
        - 'openldap-clients'
        - 'samba-client'
      state: 'present'

  - name: 'wget https://download.nextcloud.com/server/releases/{{ nextcloud__version }}.tar.bz2'
    ansible.builtin.get_url:
      url: 'https://download.nextcloud.com/server/releases/{{ nextcloud__version }}.tar.bz2'
      dest: '/tmp/nextcloud-{{ nextcloud__version }}.tar.bz2'

  - name: 'bunzip /tmp/nextcloud-{{ nextcloud__version }}.tar.bz2 /var/www/html/'
    ansible.builtin.unarchive:
      src: '/tmp/nextcloud-{{ nextcloud__version }}.tar.bz2'
      dest: '/var/www/html/'
      remote_src: true
      creates: '/var/www/html/nextcloud/config'

  - name: 'Deploy /var/www/html/nextcloud/config/objectstore.config.php (storage backend)'
    ansible.builtin.template:
      src: 'var/www/html/nextcloud/config/objectstore.config.php.j2'
      dest: '/var/www/html/nextcloud/config/objectstore.config.php'
      owner: 'apache'
      group: 'apache'
      mode: 0o644
    when: '(nextcloud__storage_backend_s3["bucket"] is defined and nextcloud__storage_backend_s3["bucket"] | length)
          or (nextcloud__storage_backend_swift["bucket"] is defined and nextcloud__storage_backend_swift["bucket"] | length)'

  - name: 'chown -R apache:apache /var/www/html/nextcloud'
    ansible.builtin.file:
      path: '/var/www/html/nextcloud'
      owner: 'apache'
      group: 'apache'
      recurse: true

  - name: 'mkdir path/to/data; chown -R apache:apache path/to/data; chmod 0750 -R path/to/data'
    ansible.builtin.file:
      path: '{{ item }}'
      state: 'directory'
      owner: 'apache'
      group: 'apache'
      mode: 0o750
    loop:
      - '/data'
      - '/var/www/html/nextcloud/data'

  - name: 'chmod +x /var/www/html/nextcloud/occ'
    ansible.builtin.file:
      path: '/var/www/html/nextcloud/occ'
      mode: 0o755

  - name: 'restorecon -Fvr /data /var/www/html/nextcloud'
    ansible.builtin.command: 'restorecon -Fvr /data /var/www/html/nextcloud'
    register: 'nextcloud__restorecon_nextcloud_result'
    changed_when: 'nextcloud__restorecon_nextcloud_result["stdout"] | length'

  - name: 'Run the Nextcloud installer'
    # installation hangs without "--admin-user" and "--admin-pass"
    ansible.builtin.command: >-
      php occ maintenance:install
        --admin-pass '{{ nextcloud__users.0.password }}'
        --admin-user '{{ nextcloud__users.0.username }}'
        --data-dir '{{ nextcloud__datadir }}'
        --database 'mysql'
        --database-host '{{ nextcloud__database_host }}'
        --database-name '{{ nextcloud__database_name }}'
        --database-user '{{ nextcloud__mariadb_login.username }}'
        --database-pass '{{ nextcloud__mariadb_login.password }}'
    args:
      chdir: '/var/www/html/nextcloud/'
      creates: '/var/www/html/nextcloud/config/config.php'
    become: true
    become_user: 'apache'

  - name: 'Convert some database columns to big int'
    ansible.builtin.command: |
      php occ db:convert-filecache-bigint --no-interaction
    args:
      chdir: '/var/www/html/nextcloud/'
    become: true
    become_user: 'apache'
    register: 'nextcloud__convert_filecache_bigint_result'
    changed_when: '"All tables already up to date" not in nextcloud__convert_filecache_bigint_result["stdout"]'
    # changed_when: there is no easy way to check for changes

  tags:
    - 'nextcloud'


- block:

  - name: 'Set Nextcloud system settings'
    linuxfabrik.lfops.nextcloud_occ_system_config:
      name: '{{ item["key"] }}'
      value: '{{ item["value"] }}'
      type: '{{ item["type"] | d("string") | quote }}'
      state: '{{ item["state"] | d("present") }}'
    become: true
    become_user: 'apache'
    loop: '{{ nextcloud__sysconfig__combined_var }}'

  # do this straight after the installation to get NC up and running
  # otherwise subsequent occ commands might fail
  - name: 'restart php-fpm'
    ansible.builtin.service:
      name: 'php-fpm'
      state: 'restarted'

  tags:
    - 'nextcloud'
    - 'nextcloud:configure'


- block:

  - name: 'Disable Nextcloud apps'
    ansible.builtin.command: |
      php occ app:disable {{ item['name'] | quote }}
    args:
      chdir: '/var/www/html/nextcloud/'
    become: true
    become_user: 'apache'
    when:
      - 'item["state"] | d("enabled") == "disabled"'
    loop: '{{ nextcloud__apps__combined_var }}'
    register: 'nextcloud__apps_disable_result'
    changed_when: '"disabled" in nextcloud__apps_disable_result["stdout"]'
    failed_when: 'nextcloud__apps_disable_result["rc"] != 0 and "No such app enabled:" not in nextcloud__apps_disable_result["stdout"]'

  - name: 'Remove Nextcloud apps'
    ansible.builtin.command: |
      php occ app:remove {{ item['name'] | quote }}
    args:
      chdir: '/var/www/html/nextcloud/'
    become: true
    become_user: 'apache'
    when:
      - 'item["state"] | d("enabled") == "absent"'
    loop: '{{ nextcloud__apps__combined_var }}'
    register: 'nextcloud__apps_remove_result'
    changed_when: '"removed" in nextcloud__apps_remove_result["stdout"]'
    failed_when: 'nextcloud__apps_remove_result["rc"] != 0 and "is not installed" not in nextcloud__apps_remove_result["stdout"]'

  - name: 'Install Nextcloud apps'
    # using `--keep-disabled` so that the apps are not instantly enabled, as that is done anyway in the next task
    ansible.builtin.command: >-
      php occ app:install
      --keep-disabled
      {{ (item['force'] | d(false)) | ternary("--force", "") }}
      {{ item['name'] | quote }}
    args:
      chdir: '/var/www/html/nextcloud/'
    become: true
    become_user: 'apache'
    when:
      - 'item["state"] | d("enabled") in ["present", "enabled"]'
    loop: '{{ nextcloud__apps__combined_var }}'
    register: 'nextcloud__apps_install_result'
    changed_when: 'nextcloud__apps_install_result["rc"] == 0 and "already installed" not in nextcloud__apps_install_result["stdout"]'
    failed_when: 'nextcloud__apps_install_result["rc"] != 0 and "already installed" not in nextcloud__apps_install_result["stdout"]'

  - name: 'Enable Nextcloud apps'
    ansible.builtin.command: |
      php occ app:enable
      {{ (item['force'] | d(false)) | ternary("--force", "") }}
      {{ item['name'] | quote }}
    args:
      chdir: '/var/www/html/nextcloud/'
    become: true
    become_user: 'apache'
    when:
      - 'item["state"] | d("enabled") == "enabled"'
    loop: '{{ nextcloud__apps__combined_var }}'
    register: 'nextcloud__apps_enable_result'
    changed_when: 'nextcloud__apps_enable_result["rc"] == 0 and "already enabled" not in nextcloud__apps_enable_result["stdout"]'
    failed_when: 'nextcloud__apps_enable_result["rc"] != 0 and "already enabled" not in nextcloud__apps_enable_result["stdout"]'

  - name: 'Set Nextcloud app settings'
    linuxfabrik.lfops.nextcloud_occ_app_config:
      app: '{{ (item["key"] | split)[0] }}'
      name: '{{ (item["key"] | split)[1:] | join(" ") }}'
      value: '{{ item["value"] }}'
      type: '{{ item["type"] | d("string") | quote }}'
      state: '{{ item["state"] | d("present") }}'
    become: true
    become_user: 'apache'
    loop: '{{ nextcloud__app_configs__combined_var }}'

  - name: 'restart php-fpm'
    ansible.builtin.service:
      name: 'php-fpm'
      state: 'restarted'

  when:
    - 'not nextcloud__skip_apps'
  tags:
    - 'nextcloud'
    - 'nextcloud:apps'


- block:

  - name: 'restorecon -Fvr /var/www/html/nextcloud/apps/notify_push/'
    ansible.builtin.command: 'restorecon -Fvr /var/www/html/nextcloud/apps/notify_push/'
    register: 'nextcloud__restorecon_notify_push_result'
    changed_when: 'nextcloud__restorecon_notify_push_result["stdout"] | length'

  - name: 'systemctl restart notify_push.service'
    ansible.builtin.systemd_service:
      name: 'notify_push.service'
      state: 'restarted'

  - name: 'Setup notify_push at https://{{ nextcloud__fqdn }}/push'
    ansible.builtin.command: |
      php occ notify_push:setup https://{{ nextcloud__fqdn }}/push
    args:
      chdir: '/var/www/html/nextcloud/'
    become: true
    become_user: 'apache'

  when:
    - 'not nextcloud__skip_notify_push'
  tags:
    - 'nextcloud'
    - 'nextcloud:configure'
    - 'nextcloud:notify_push'


- block:

  # nested loop construct (for user in users; for setting in user.settings; ...)
  - ansible.builtin.include_tasks: 'create-user.yml'
    loop: '{{ nextcloud__users }}'
    loop_control:
      loop_var: 'ncuser'

  tags:
    - 'nextcloud'
    - 'nextcloud:user'


- block:

  - name: 'chown -R apache:apache /var/www/html/nextcloud'
    ansible.builtin.file:
      path: '/var/www/html/nextcloud'
      owner: 'apache'
      group: 'apache'
      recurse: true

  tags:
    - 'nextcloud'


- block:

  - name: 'Deploy /etc/systemd/system/nextcloud-jobs.service'
    ansible.builtin.template:
      src: 'etc/systemd/system/nextcloud-jobs.service.j2'
      dest: '/etc/systemd/system/nextcloud-jobs.service'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'nextcloud: systemctl daemon-reload'

  - name: 'Deploy /etc/systemd/system/nextcloud-jobs.timer'
    ansible.builtin.template:
      src: 'etc/systemd/system/nextcloud-jobs.timer.j2'
      dest: '/etc/systemd/system/nextcloud-jobs.timer'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'nextcloud: systemctl daemon-reload'

  - name: 'Set background job to "cron"'
    ansible.builtin.command: |
      php occ background:cron
    args:
      chdir: '/var/www/html/nextcloud/'
    become: true
    become_user: 'apache'
    # changed_when: there is no easy way to check for changes

  - name: 'Deploy /etc/systemd/system/nextcloud-app-update.service'
    ansible.builtin.template:
      src: 'etc/systemd/system/nextcloud-app-update.service.j2'
      dest: '/etc/systemd/system/nextcloud-app-update.service'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'nextcloud: systemctl daemon-reload'

  - name: 'Deploy /etc/systemd/system/nextcloud-app-update.timer'
    ansible.builtin.template:
      src: 'etc/systemd/system/nextcloud-app-update.timer.j2'
      dest: '/etc/systemd/system/nextcloud-app-update.timer'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'nextcloud: systemctl daemon-reload'

  - name: 'Deploy /etc/systemd/system/nextcloud-scan-files.service'
    ansible.builtin.template:
      src: 'etc/systemd/system/nextcloud-scan-files.service.j2'
      dest: '/etc/systemd/system/nextcloud-scan-files.service'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'nextcloud: systemctl daemon-reload'

  - name: 'Deploy /etc/systemd/system/nextcloud-scan-files.timer'
    ansible.builtin.template:
      src: 'etc/systemd/system/nextcloud-scan-files.timer.j2'
      dest: '/etc/systemd/system/nextcloud-scan-files.timer'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'nextcloud: systemctl daemon-reload'

  - name: 'Deploy /etc/systemd/system/nextcloud-ldap-show-remnants.service'
    ansible.builtin.template:
      src: 'etc/systemd/system/nextcloud-ldap-show-remnants.service.j2'
      dest: '/etc/systemd/system/nextcloud-ldap-show-remnants.service'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'nextcloud: systemctl daemon-reload'

  - name: 'Deploy /etc/systemd/system/nextcloud-ldap-show-remnants.timer'
    ansible.builtin.template:
      src: 'etc/systemd/system/nextcloud-ldap-show-remnants.timer.j2'
      dest: '/etc/systemd/system/nextcloud-ldap-show-remnants.timer'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'nextcloud: systemctl daemon-reload'

  - name: 'Deploy /usr/local/bin/nextcloud-ldap-show-remnants'
    ansible.builtin.template:
      src: 'usr/local/bin/nextcloud-ldap-show-remnants.j2'
      dest: '/usr/local/bin/nextcloud-ldap-show-remnants'
      owner: 'root'
      group: 'root'
      mode: 0o755

  tags:
    - 'nextcloud'
    - 'nextcloud:cron'


- block:

  - name: 'systemctl {{ nextcloud__timer_jobs_enabled | bool | ternary("enable", "disable") }} nextcloud-jobs.timer --now'
    ansible.builtin.systemd:
      name: 'nextcloud-jobs.timer'
      state: '{{ nextcloud__timer_jobs_enabled | bool | ternary("started", "stopped") }}'
      enabled: '{{ nextcloud__timer_jobs_enabled }}'

  - name: 'systemctl {{ nextcloud__timer_app_update_enabled | bool | ternary("enable", "disable") }} nextcloud-app-update.timer --now'
    ansible.builtin.systemd:
      name: 'nextcloud-app-update.timer'
      state: '{{ nextcloud__timer_app_update_enabled | bool | ternary("started", "stopped") }}'
      enabled: '{{ nextcloud__timer_app_update_enabled }}'

  - name: 'systemctl {{ nextcloud__timer_scan_files_enabled | bool | ternary("enable", "disable") }} nextcloud-scan-files.timer --now'
    ansible.builtin.systemd:
      name: 'nextcloud-scan-files.timer'
      state: '{{ nextcloud__timer_scan_files_enabled | bool | ternary("started", "stopped") }}'
      enabled: '{{ nextcloud__timer_scan_files_enabled }}'

  - name: 'systemctl {{ nextcloud__timer_ldap_show_remnants_enabled | bool | ternary("enable", "disable") }} nextcloud-ldap-show-remnants.timer --now'
    ansible.builtin.systemd:
      name: 'nextcloud-ldap-show-remnants.timer'
      state: '{{ nextcloud__timer_ldap_show_remnants_enabled | bool | ternary("started", "stopped") }}'
      enabled: '{{ nextcloud__timer_ldap_show_remnants_enabled }}'

  tags:
    - 'nextcloud'
    - 'nextcloud:cron'
    - 'nextcloud:state'


- block:

  - name: 'Deploy /usr/local/bin/nextcloud-update'
    ansible.builtin.template:
      src: 'usr/local/bin/nextcloud-update.j2'
      dest: '/usr/local/bin/nextcloud-update'
      owner: 'root'
      group: 'root'
      mode: 0o755

  tags:
    - 'nextcloud'
    - 'nextcloud:scripts'
