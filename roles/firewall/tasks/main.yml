- block:

  - name: 'Get the list of services'
    ansible.builtin.service_facts: # yamllint disable-line rule:empty-values

  - name: 'Be sure {{ item["service"] }} is stopped and disabled'
    ansible.builtin.systemd:
      name: '{{ item["service"] }}'
      state: 'stopped'
      enabled: false
    when:
      - 'firewall__firewall != item["name"]'
      - 'item["service"] in ansible_facts["services"]'
      - 'ansible_facts["services"][item["service"]]["status"] != "not-found"'
    loop:
      - name: 'firewalld'
        service: 'firewalld.service'
      - name: 'fwbuilder'
        service: 'fwb'
      - name: 'iptables.service'
        service: 'iptables'
      - name: 'nftables'
        service: 'nftables.service'
      - name: 'ufw'
        service: 'ufw.service'

  - name: 'Be sure {{ item["service"] }} is masked, even if it is not installed yet'
    # prevents the service from starting even if it is installed later on
    ansible.builtin.systemd:
      name: '{{ item["service"] }}'
      masked: true
    when:
      - 'firewall__firewall != item["name"]'
    loop:
      - name: 'firewalld'
        service: 'firewalld.service'
      - name: 'fwbuilder'
        service: 'fwb.service'
      - name: 'iptables'
        service: 'iptables.service'
      - name: 'nftables'
        service: 'nftables.service'
      - name: 'ufw'
        service: 'ufw.service'

  tags:
    - 'firewall'


- name: 'Perform platform/version specific tasks'
  ansible.builtin.include_tasks: '{{ __task_file }}'
  when: '__task_file | length'
  vars:
    __task_file: '{{ lookup("ansible.builtin.first_found", __first_found_options) }}'
    __first_found_options:
      files:
        - '{{ ansible_facts["distribution"] }}{{ ansible_facts["distribution_version"] }}.yml'
        - '{{ ansible_facts["distribution"] }}{{ ansible_facts["distribution_major_version"] }}.yml'
        - '{{ ansible_facts["distribution"] }}.yml'
        - '{{ ansible_facts["os_family"] }}{{ ansible_facts["distribution_version"] }}.yml'
        - '{{ ansible_facts["os_family"] }}{{ ansible_facts["distribution_major_version"] }}.yml'
        - '{{ ansible_facts["os_family"] }}.yml'
      paths:
        - '{{ role_path }}/tasks'
      skip: true
  tags:
    - 'always'


- block:

  - name: 'install firewalld'
    ansible.builtin.package:
      name: 'firewalld'
      state: 'present'

  - name: 'Be sure firewalld is started, enabled and not masked'
    ansible.builtin.systemd:
      name: 'firewalld.service'
      state: 'started'
      enabled: true
      masked: false

  - name: 'Apply port configuration'
    ansible.posix.firewalld:
      port: '{{ item["port"] }}'
      state: '{{ item["state"] | d("enabled") }}'
      permanent: true
    loop: '{{ firewall__firewalld_ports__combined_var }}'
    notify: 'firewall: reload firewalld'

  - name: 'Apply service configuration'
    ansible.posix.firewalld:
      service: '{{ item["service"] }}'
      state: '{{ item["state"] | d("enabled") }}'
      permanent: true
    loop: '{{ firewall__firewalld_services__combined_var }}'
    notify: 'firewall: reload firewalld'

  - name: 'Flush handlers to activate changes to FirewallD'
    ansible.builtin.meta: 'flush_handlers'

  when: 'firewall__firewall == "firewalld"'
  tags:
    - 'firewall'
    - 'firewall:firewalld'


- block:

  - name: 'Remove any existing local fwb repo'
    ansible.builtin.file:
      path: '/tmp/ansible.fwb-{{ inventory_dir | basename }}'
      state: 'absent'
    changed_when: false # not a config change on the server
    check_mode: false # run task even if `--check` is specified
    delegate_to: 'localhost'
    when: 'firewall__fwbuilder_repo_url is defined and firewall__fwbuilder_repo_url | length'

  - name: 'Clone the fwb git repo to localhost'
    ansible.builtin.git:
      repo: '{{ firewall__fwbuilder_repo_url }}'
      dest: '/tmp/ansible.fwb-{{ inventory_dir | basename }}'
      depth: 1
      single_branch: true
    changed_when: false # not a config change on the server
    delegate_to: 'localhost'
    run_once: true
    check_mode: false # run task even if `--check` is specified
    when: 'firewall__fwbuilder_repo_url is defined and firewall__fwbuilder_repo_url | length'

  - name: 'Deploy /etc/fwb.sh'
    ansible.builtin.copy:
      backup: true
      src: '/tmp/ansible.fwb-{{ inventory_dir | basename }}/{{ firewall__fwbuilder_fw_file }}.fw'
      dest: '/etc/fwb.sh'
      owner: 'root'
      group: 'root'
      mode: 0o500  # no need for others to read/write this file, just u=rx
    register: 'firewall__deploy_fwb_result'
    notify: 'firewall: restart fwb'
    when: 'firewall__fwbuilder_repo_url is defined and firewall__fwbuilder_repo_url | length'

  - name: 'Deploy fwbuilder systemd service file'
    ansible.builtin.template:
      src: 'etc/systemd/system/fwb.service.j2'
      dest: '/etc/systemd/system/fwb.service'
      owner: 'root'
      mode: 0o644

  when: 'firewall__firewall == "fwbuilder"'
  tags:
    - 'firewall'
    - 'firewall:deploy_fwb_sh'


- block:

  - name: 'Make sure iptables is installed (required for fwb)'
    ansible.builtin.package:
      name: 'iptables'
      state: 'present'

  # You can't enable and start fwb.service at the same time - `/etc/fwb.sh start`
  # always hangs on the first run (only than) on a brand-new machine, and then Ansible also hangs.
  # The ever-first start of netfilter changes something on Linux (kernel modules or something).
  # Every subsequent run of `/etc/fwb.sh start` runs flawlessly.
  # `/etc/fwb.sh stop` doesn't change much, but also involves netfilter. So split this up, and
  # first stop the firewall, then start it, no matter what.
  - name: 'Be sure fwb is enabled and not masked'
    ansible.builtin.systemd:
      name: 'fwb.service'
      # state: 'stopped' 2025-02-28: let's try if splitting the enabling and starting is enough without stopping, to prevent service distruptions during deployment
      # we use the handler to restart the fwb in case of changes
      enabled: true
      masked: false
      daemon_reload: true

  - name: 'systemctl start fwb.service'
    ansible.builtin.systemd:
      name: 'fwb.service'
      state: 'started'

  when: 'firewall__firewall == "fwbuilder"'
  tags:
    - 'firewall'


- block:

  - name: 'Make sure iptables-services is installed'
    ansible.builtin.package:
      name: 'iptables-services'
      state: 'present'

  - name: 'Copy iptables definition to /etc/sysconfig/iptables'
    ansible.builtin.copy:
      backup: true
      src: "{{ inventory_dir }}/host_files/{{ inventory_hostname }}/etc/sysconfig/iptables"
      dest: '/etc/sysconfig/'
      owner: 'root'
      group: 'root'
      mode: 0o600
    when: 'inventory_dir ~ "/host_files/" ~ inventory_hostname ~ "/etc/sysconfig/iptables" is file'
    register: 'firewall__iptables_definition_result'

  - name: 'systemctl restart iptables.service'
    ansible.builtin.systemd:
      name: 'iptables.service'
      state: "{{ firewall__iptables_definition_result is changed | bool | ternary('restarted', 'started') }}"
      enabled: true
      masked: false
    # when: 'firewall__iptables_definition_result is changed'

  when: 'firewall__firewall == "iptables"'
  tags:
    - 'firewall'


- block:

  - name: 'Make sure nftables is installed'
    ansible.builtin.package:
      name: 'nftables'
      state: 'present'

  - name: 'Be sure nftables is started, enabled and not masked'
    ansible.builtin.systemd:
      name: 'nftables.service'
      state: 'started'
      enabled: true
      masked: false

  when: 'firewall__firewall == "nftables"'
  tags:
    - 'firewall'


- block:

  - name: 'Be sure ufw is started, enabled and not masked'
    ansible.builtin.systemd:
      name: 'ufw.service'
      state: 'started'
      enabled: true
      masked: false

  when: 'firewall__firewall == "ufw"'
  tags:
    - 'firewall'
