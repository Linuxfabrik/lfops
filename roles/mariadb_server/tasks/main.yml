- name: 'Set platform/version specific variables'
  ansible.builtin.import_role:
    name: 'shared'
    tasks_from: 'platform-variables.yml'
  tags:
    - 'always'
    - 'mariadb_server'


- name: 'Perform platform/version specific tasks'
  ansible.builtin.include_tasks: '{{ __task_file }}'
  when: '__task_file | length'
  vars:
    __task_file: '{{ lookup("ansible.builtin.first_found", __first_found_options) }}'
    __first_found_options:
      files:
        - '{{ ansible_facts["distribution"] }}{{ ansible_facts["distribution_version"] }}.yml'
        - '{{ ansible_facts["distribution"] }}{{ ansible_facts["distribution_major_version"] }}.yml'
        - '{{ ansible_facts["distribution"] }}.yml'
        - '{{ ansible_facts["os_family"] }}{{ ansible_facts["distribution_version"] }}.yml'
        - '{{ ansible_facts["os_family"] }}{{ ansible_facts["distribution_major_version"] }}.yml'
        - '{{ ansible_facts["os_family"] }}.yml'
      paths:
        - '{{ role_path }}/tasks'
      skip: true
  tags:
    - 'always'


- block:

  - name: 'systemctl disable --now mariadb.service'
    ansible.builtin.service:
      name: 'mariadb.service'
      state: 'stopped'
      enabled: false

  - name: 'Remove old mariadb-server package'
    ansible.builtin.package:
      name:
        - 'MariaDB-server'
        - 'mariadb-server'
      state: 'absent'

  - name: 'Install latest mariadb-server' # noqa package-latest (latest is necessary for upgrade)
    ansible.builtin.package:
      name:
        - 'mariadb-server'
      state: 'latest'

  - name: 'Update mariadb-client, mariadb-common, mariadb-shared on Red Hat'
    ansible.builtin.dnf:
      # `mariadb-*` sadly does not work with update_only
      name:
        - 'MariaDB-client'
        - 'MariaDB-common'
        - 'MariaDB-shared'
        - 'mariadb-client'
        - 'mariadb-common'
        - 'mariadb-shared'
      update_only: true # only update already installed packages
      state: 'latest'
    when:
      - 'ansible_facts["os_family"] == "RedHat"'
      # Debian already upgrades the other packages during the installation of mariadb-server

  tags:
    - 'mariadb_server:upgrade'
    - 'never'


- block:

  - name: 'Install mariadb-server'
    ansible.builtin.package:
      name:
        - 'mariadb-server'
      state: 'present'

  - name: 'Optionally install galera-4, mariadb-backup, rsync and socat'
    ansible.builtin.package:
      name:
        - 'galera-4'
        - 'mariadb-backup' # required for `wsrep_sst_method='mariabackup'`
        - 'rsync' # required for `wsrep_sst_method='rsync'`
        - 'socat' # required for `wsrep_sst_method='mariabackup'`
      state: 'present'
    when:
      - 'mariadb_server__cnf_wsrep_on is true'

  tags:
    - 'mariadb_server'


- block:

  - name: 'Get the list of installed packages'
    ansible.builtin.package_facts:  # yamllint disable-line rule:empty-values
    check_mode: false # run task even if `--check` is specified

  - name: 'Get mariadb-server version'
    ansible.builtin.set_fact:
      mariadb_server__installed_version: '{{ (ansible_facts["packages"]["MariaDB-server"][0]["version"] | d(ansible_facts["packages"]["mariadb-server"][0]["version"])) | regex_search("\d+\.\d+") }}'

  - name: 'Load default values for {{ mariadb_server__installed_version }}'
    ansible.builtin.include_vars: 'vars/{{ mariadb_server__installed_version }}.yml'

  tags:
    - 'mariadb_server'
    - 'mariadb_server:clone_datadir'
    - 'mariadb_server:configure'
    - 'mariadb_server:dare'
    - 'mariadb_server:database'
    - 'mariadb_server:dump'
    - 'mariadb_server:secure_installation'
    - 'mariadb_server:state'
    - 'mariadb_server:sys_schema'
    - 'mariadb_server:upgrade'
    - 'mariadb_server:user'


# Create a Linux user for the dump user and the admin user if it uses unix_socket authentication
- block:

  - name: 'Create Linux user {{ mariadb_server__admin_user["username"] }} for unix_socket authentication'
    ansible.builtin.user:
      name: '{{ mariadb_server__admin_user["username"] }}'
      shell: '/bin/bash'
      create_home: false
      system: true
    when:
      - 'mariadb_server__admin_user["plugin"] | default("") == "unix_socket"'

  tags:
    - 'mariadb_server'
    - 'mariadb_server:user'


- block:

  - name: 'Remove trailing `/` from {{ mariadb_server__cnf_datadir__combined_var }}'
    ansible.builtin.set_fact:
      mariadb_server__cnf_datadir__combined_var: '{{ mariadb_server__cnf_datadir__combined_var[:-1] }}'
    when:
      - 'mariadb_server__cnf_datadir__combined_var.endswith("/")'

  - name: 'mariadb_server__cnf_datadir__combined_var:'
    ansible.builtin.debug:
      var: 'mariadb_server__cnf_datadir__combined_var'

  - name: |-
      mkdir -p {{ mariadb_server__cnf_datadir__combined_var }}
      chown mysql:mysql {{ mariadb_server__cnf_datadir__combined_var }}
      chmod '{{ mariadb_server__datadir_mode__combined_var | ansible.builtin.regex_replace("^0o", "") }}' {{ mariadb_server__cnf_datadir__combined_var }}
    ansible.builtin.file:
      path: '{{ mariadb_server__cnf_datadir__combined_var }}'
      state: 'directory'
      owner: 'mysql'
      group: 'mysql'
      mode: '{{ mariadb_server__datadir_mode__combined_var }}'

  # /var/lib/mysql(-files|-keyring)?(/.*)?             all files          system_u:object_r:mysqld_db_t:s0
  - name: 'semanage fcontext --add --type mysqld_db_t {{ mariadb_server__cnf_datadir__combined_var | ansible.builtin.regex_escape }}(-files|-keyring)?(/.*)?'
    community.general.sefcontext:
      setype: 'mysqld_db_t'
      target: '{{ mariadb_server__cnf_datadir__combined_var | ansible.builtin.regex_escape }}(-files|-keyring)?(/.*)?'
      state: 'present'
    when:
      - 'ansible_facts["os_family"] == "RedHat"'
      - 'ansible_facts["selinux"]["status"] != "disabled"'

  - name: 'semanage port --add --type mysqld_port_t --proto udp {{ mariadb_server__cnf_extra_port__combined_var }} # adjust SELinux for MariaDB extra port'
    community.general.seport:
      ports: '{{ mariadb_server__cnf_extra_port__combined_var }}'
      proto: 'tcp'
      setype: 'mysqld_port_t'
    when:
      - 'ansible_facts["os_family"] == "RedHat"'
      - 'ansible_facts["selinux"]["status"] != "disabled"'

  - name: 'Deploy /etc/tmpfiles.d/mariadb.conf for the socket path'
    ansible.builtin.template:
      src: 'etc/tmpfiles.d/mariadb.conf.j2'
      dest: '/etc/tmpfiles.d/mariadb.conf'
      owner: 'root'
      group: 'root'
      mode: 0o644
    register: 'mariadb_server__deploy_tmpfiles_result'

  - name: 'systemd-tmpfiles --create /etc/tmpfiles.d/mariadb.conf' # noqa no-handler no-changed-when (sadly no easy way to detect changes)
    ansible.builtin.command: 'systemd-tmpfiles --create /etc/tmpfiles.d/mariadb.conf'
    when:
      - 'mariadb_server__deploy_tmpfiles_result is changed'

  # /var/lib/mysql/mysql\.sock                         socket             system_u:object_r:mysqld_var_run_t:s0
  - name: 'semanage fcontext --add --type mysqld_var_run_t {{ mariadb_server__cnf_socket__combined_var | ansible.builtin.regex_escape }}'
    community.general.sefcontext:
      setype: 'mysqld_var_run_t'
      target: '{{ mariadb_server__cnf_socket__combined_var | ansible.builtin.regex_escape }}'
      ftype: 's'  # for socket files
      state: 'present'
    when:
      - 'ansible_facts["os_family"] == "RedHat"'
      - 'ansible_facts["selinux"]["status"] != "disabled"'

  - name: 'restorecon -Fvr {{ mariadb_server__cnf_datadir__combined_var }}'
    ansible.builtin.command: 'restorecon -Fvr {{ mariadb_server__cnf_datadir__combined_var }}'
    register: 'mariadb_server__restorecon_result'
    changed_when: 'mariadb_server__restorecon_result["stdout"] | length'
    when:
      - 'ansible_facts["os_family"] == "RedHat"'

  tags:
    - 'mariadb_server'
    - 'mariadb_server:clone_datadir'
    - 'mariadb_server:configure'
    - 'mariadb_server:secure_installation'


- block:

  - name: 'mkdir /var/log/mariadb'
    ansible.builtin.file:
      path: '/var/log/mariadb'
      state: 'directory'
      owner: 'mysql'
      group: 'mysql'
      mode: 0o755

  - name: 'Check if /var/log/mariadb/mariadb.log exists'
    ansible.builtin.stat:
      path: '/var/log/mariadb/mariadb.log'
    register: 'mariadb_server__logfile_exists_result'

  - name: |-
      touch /var/log/mariadb/mariadb.log
      chown mysql:mysql /var/log/mariadb/mariadb.log
    ansible.builtin.file:
      path: '/var/log/mariadb/mariadb.log'
      state: 'touch'
      owner: 'mysql'
      group: 'mysql'
      mode: 0o660
    when: 'not mariadb_server__logfile_exists_result["stat"]["exists"]'

  - name: 'restorecon -Fvr /var/log/mariadb/mariadb.log'
    ansible.builtin.command: 'restorecon -Fvr /var/log/mariadb/mariadb.log'
    register: 'mariadb_server__restorecon_result'
    changed_when: 'mariadb_server__restorecon_result["stdout"] | length'
    when:
      - 'ansible_facts["os_family"] == "RedHat"'

  - name: 'Temporarily disable wsrep_on during initial setup'
    ansible.builtin.set_fact:
      mariadb_server__cnf_wsrep_on_original_value: '{{ mariadb_server__cnf_wsrep_on }}'
      mariadb_server__cnf_wsrep_on: false
    when:
      - 'mariadb_server__run_galera_new_cluster is true'

  - name: 'Deploy {{ mariadb_server__config_file_00 }}'
    ansible.builtin.template:
      src: 'etc/my.cnf.d/{{ mariadb_server__installed_version }}-z00-linuxfabrik.cnf.j2'
      dest: '{{ mariadb_server__config_file_00 }}'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'mariadb_server: systemctl restart mariadb'

  - name: 'Reset value of wsrep_on'
    ansible.builtin.set_fact:
      mariadb_server__cnf_wsrep_on: '{{ mariadb_server__cnf_wsrep_on_original_value }}'
    when:
      - 'mariadb_server__run_galera_new_cluster is true'

  - name: 'Make sure mariadb can read the SSL cert'
    ansible.builtin.file:
      path: '{{ mariadb_server__cnf_ssl_cert__combined_var }}'
      owner: 'mysql'
      group: 'root'
      mode: 0o644
    when:
      - 'mariadb_server__cnf_ssl_key__combined_var | length'

  - name: 'Make sure mariadb can read the SSL key'
    ansible.builtin.file:
      path: '{{ mariadb_server__cnf_ssl_key__combined_var }}'
      owner: 'mysql'
      group: 'root'
      mode: 0o600
    when:
      - 'mariadb_server__cnf_ssl_key__combined_var | length'

  - name: 'mkdir -p /etc/systemd/system/mariadb.service.d/'
    ansible.builtin.file:
      path: '/etc/systemd/system/mariadb.service.d/'
      owner: 'root'
      group: 'root'
      mode: 0o755
      state: 'directory'

  - name: 'Deploy /etc/systemd/system/mariadb.service.d/socket-selinux-workaround.conf'
    ansible.builtin.template:
      src: 'etc/systemd/system/mariadb.service.d/socket-selinux-workaround.conf.j2'
      dest: '/etc/systemd/system/mariadb.service.d/socket-selinux-workaround.conf'
      owner: 'root'
      group: 'root'
      mode: 0o644
    register: 'mariadb_server__socket_selinux_workaround_result'
    notify: 'mariadb_server: systemctl restart mariadb'

  - name: 'Deploy /etc/systemd/system/mariadb.service.d/z00-linuxfabrik.conf'
    ansible.builtin.template:
      src: 'etc/systemd/system/mariadb.service.d/z00-linuxfabrik.conf.j2'
      dest: '/etc/systemd/system/mariadb.service.d/z00-linuxfabrik.conf'
      owner: 'root'
      group: 'root'
      mode: 0o644
    register: 'mariadb_server__z00_linuxfabrik_result'
    notify: 'mariadb_server: systemctl restart mariadb'

  - name: 'systemctl daemon-reload'
    ansible.builtin.systemd:
      daemon_reload: true
    when:
      - 'mariadb_server__socket_selinux_workaround_result is changed or mariadb_server__z00_linuxfabrik_result is changed'

  - name: 'systemctl daemon-reload' # noqa no-handler would require flush_handlers here anyway
    ansible.builtin.systemd:
      daemon_reload: true
    when: 'mariadb_server__socket_selinux_workaround_result is changed'

  - name: 'Deploy {{ mariadb_server__logrotate_path }}'
    ansible.builtin.template:
      src: 'etc/logrotate.d/mariadb.j2'
      dest: '{{ mariadb_server__logrotate_path }}'
      owner: 'root'
      mode: 0o600

  tags:
    - 'mariadb_server'
    - 'mariadb_server:clone_datadir'
    - 'mariadb_server:configure'
    - 'mariadb_server:dare'
    - 'mariadb_server:upgrade'


- block:

  - ansible.builtin.include_tasks: 'configure-dare.yml'

  tags:
    - 'mariadb_server'
    - 'mariadb_server:dare'


- block:

  - name: 'systemctl {{ mariadb_server__enabled | bool | ternary("enable", "disable") }} mariadb.service'
    ansible.builtin.service:
      name: 'mariadb.service'
      enabled: '{{ mariadb_server__enabled }}'

  - name: 'systemctl {{ mariadb_server__state[:-2] }} mariadb.service'
    ansible.builtin.service:
      name: 'mariadb.service'
      state: '{{ mariadb_server__state }}'

  - name: 'Flush handlers to make sure that MariaDB is using the correct socket from here on'
    ansible.builtin.meta: 'flush_handlers'

  tags:
    - 'mariadb_server'
    - 'mariadb_server:configure'
    - 'mariadb_server:state'
    - 'mariadb_server:upgrade'


- block:

  - name: 'Deploy temporary defaults file to /tmp/lfops-mariadb-defaults.cnf'
    ansible.builtin.copy:
      dest: '/tmp/lfops-mariadb-defaults.cnf'
      content: |-
        [client]
        user = '{{ mariadb_server__admin_user["username"] }}'
        {% if (mariadb_server__admin_user["plugin"] | default("")) != "unix_socket" %}
        password = '{{ mariadb_server__admin_user["password"] }}'
        {% endif %}
        host = localhost
      owner: 'root'
      group: 'root'
      mode: 0o600 # contains secrets

  - name: 'mysql_upgrade --defaults-file=/tmp/lfops-mariadb-defaults.cnf' # noqa no-changed-when will always be changed for upgrades
    ansible.builtin.command: 'mysql_upgrade --defaults-file=/tmp/lfops-mariadb-defaults.cnf'
    register: 'mariadb_server__mysql_upgrade_result'

  - name: 'rm /tmp/lfops-mariadb-defaults.cnf'
    ansible.builtin.file:
      dest: '/tmp/lfops-mariadb-defaults.cnf'
      state: 'absent'

  - name: 'print mysql_upgrade output'
    ansible.builtin.debug:
      msg:
        - '{{ mariadb_server__mysql_upgrade_result }}'
        - 'Make sure to manually check the logfile at {{ mariadb_server__cnf_log_error__combined_var }} for errors.'

  tags:
    - 'mariadb_server:upgrade'
    - 'never'


- block:

  - ansible.builtin.include_tasks: 'create-dba.yml'
    loop: '{{ mariadb_server__admin_user["host"] | d(["localhost", "127.0.0.1", "::1"]) }}'

  tags:
    - 'mariadb_server'
    - 'mariadb_server:user'


# mysql_secure_installation including some CIS hardenings
- block:

  - name: 'Secure installation (Linuxfabrik): Remove all "root" users'
    community.mysql.mysql_user:
      login_user: '{{ mariadb_server__admin_user["username"] }}'
      login_password: '{{ mariadb_server__admin_user["password"] if (mariadb_server__admin_user["plugin"] | default("")) != "unix_socket" else omit }}'
      login_unix_socket: '{{ mariadb_server__cnf_socket__combined_var }}'
      name: 'root'
      host_all: true
      state: 'absent'
    become: '{{ (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" }}'
    become_user: '{{ mariadb_server__admin_user["username"] if (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" else omit }}'
    when:
      - 'mariadb_server__admin_user["username"] != "root"'

  - name: 'Secure installation: Remove anonymous users'
    community.mysql.mysql_user:
      login_user: '{{ mariadb_server__admin_user["username"] }}'
      login_password: '{{ mariadb_server__admin_user["password"] if (mariadb_server__admin_user["plugin"] | default("")) != "unix_socket" else omit }}'
      login_unix_socket: '{{ mariadb_server__cnf_socket__combined_var }}'
      name: ''
      host_all: true
      state: 'absent'
    become: '{{ (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" }}'
    become_user: '{{ mariadb_server__admin_user["username"] if (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" else omit }}'

  - name: 'Secure installation: Remove test database'
    community.mysql.mysql_db:
      login_user: '{{ mariadb_server__admin_user["username"] }}'
      login_password: '{{ mariadb_server__admin_user["password"] if (mariadb_server__admin_user["plugin"] | default("")) != "unix_socket" else omit }}'
      login_unix_socket: '{{ mariadb_server__cnf_socket__combined_var }}'
      name: 'test'
      state: 'absent'
    become: '{{ (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" }}'
    become_user: '{{ mariadb_server__admin_user["username"] if (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" else omit }}'

  - name: 'Secure installation: Remove test database (privileges)'
    community.mysql.mysql_query:
      login_user: '{{ mariadb_server__admin_user["username"] }}'
      login_password: '{{ mariadb_server__admin_user["password"] if (mariadb_server__admin_user["plugin"] | default("")) != "unix_socket" else omit }}'
      login_unix_socket: '{{ mariadb_server__cnf_socket__combined_var }}'
      query: 'delete from mysql.db where db="test" or db="test\\_%";'
    become: '{{ (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" }}'
    become_user: '{{ mariadb_server__admin_user["username"] if (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" else omit }}'

  - name: 'Secure installation: Reload privilege tables'
    community.mysql.mysql_query:
      login_user: '{{ mariadb_server__admin_user["username"] }}'
      login_password: '{{ mariadb_server__admin_user["password"] if (mariadb_server__admin_user["plugin"] | default("")) != "unix_socket" else omit }}'
      login_unix_socket: '{{ mariadb_server__cnf_socket__combined_var }}'
      query: 'flush privileges;'
    become: '{{ (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" }}'
    become_user: '{{ mariadb_server__admin_user["username"] if (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" else omit }}'

  - name: 'Secure installation (Linuxfabrik): Remove users ignored in --skip-name-resolve mode'
    community.mysql.mysql_query:
      login_user: '{{ mariadb_server__admin_user["username"] }}'
      login_password: '{{ mariadb_server__admin_user["password"] if (mariadb_server__admin_user["plugin"] | default("")) != "unix_socket" else omit }}'
      login_unix_socket: '{{ mariadb_server__cnf_socket__combined_var }}'
      query: |-
        delete
        from
        `mysql`.`proxies_priv`
        where
        (`host` = '{{ ansible_facts["nodename"] }}')
        and (`user` = 'mysql')
        and (`proxied_host` = '')
        and (`proxied_user` = '');
    become: '{{ (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" }}'
    become_user: '{{ mariadb_server__admin_user["username"] if (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" else omit }}'
    when:
      - 'mariadb_server__cnf_skip_name_resolve__combined_var == "ON"'

  - name: 'Secure installation (Linuxfabrik): Ensure interactive login is disabled'
    ansible.builtin.user:
      name: 'mysql'
      shell: '/sbin/nologin'

  - name: 'Secure installation (Linuxfabrik): Ensure "log_error" has appropriate permissions'
    ansible.builtin.file:
      path: '{{ mariadb_server__cnf_log_error__combined_var }}'
      state: 'file'
      mode: 0o600
      owner: 'mysql'
      group: 'mysql'

  - name: 'Secure installation (Linuxfabrik): Ensure "slow_query_log_file" has appropriate permissions'
    ansible.builtin.file:
      path: '{{ mariadb_server__cnf_slow_query_log_file__combined_var }}'
      state: 'file'
      mode: 0o660
      owner: 'mysql'
      group: 'mysql'
    when:
      - 'mariadb_server__cnf_slow_query_log__combined_var == "ON"'

  - name: 'Secure installation (Linuxfabrik): Ensure "general_log_file" has appropriate permissions'
    ansible.builtin.file:
      path: '{{ mariadb_server__cnf_general_log_file__combined_var }}'
      state: 'file'
      mode: 0o600
      owner: 'mysql'
      group: 'mysql'
    when:
      - 'mariadb_server__cnf_general_log__combined_var == "ON"'

  - name: 'Check if "server_audit_file_path" exists'
    ansible.builtin.stat:
      path: '{{ mariadb_server__cnf_server_audit_file_path }}'
    register: '__mariadb_server__server_audit_file_path_stat'

  - name: 'Secure installation (Linuxfabrik): Ensure "server_audit_file_path" has appropriate permissions'
    ansible.builtin.file:
      path: '{{ mariadb_server__cnf_server_audit_file_path }}'
      state: '{{ __mariadb_server__server_audit_file_path_stat["stat"]["exists"] | ternary("file", "touch") }}'
      mode: 0o660
      owner: 'mysql'
      group: 'mysql'

  tags:
    - 'mariadb_server'
    - 'mariadb_server:secure_installation'


# configure backup (mariadb-dump user, scripts and timer)
- block:

  - name: 'Create Linux user {{ mariadb_server__dump_user["username"] }} for dump user'
    ansible.builtin.user:
      name: '{{ mariadb_server__dump_user["username"] }}'
      shell: '/bin/bash'
      create_home: false
      system: true

  - name: 'Create the backup dir for the dump user'
    ansible.builtin.file:
      path: '{{ mariadb_server__dump_directory | quote }}'
      state: 'directory'
      owner: '{{ mariadb_server__dump_user["username"] }}'
      group: '{{ mariadb_server__dump_user["username"] }}'
      mode: 0o700

  - name: 'Change permissions of the backup dir to make it writable by the dump user'
    ansible.builtin.file:
      path: '/backup'
      state: 'directory'
      owner: 'root'
      group: 'root'
      mode: 0o751

  - name: 'Install {{ mariadb_server__dump_mydumper_package }} libzstd zstd'
    ansible.builtin.package:
      name:
        - '{{ mariadb_server__dump_mydumper_package }}'
        - 'libzstd'
        - 'zstd'
      state: 'present'

  - name: 'Deploy /usr/local/bin/mariadb-dump'
    ansible.builtin.template:
      src: 'usr/local/bin/mariadb-dump.j2'
      dest: '/usr/local/bin/mariadb-dump'
      mode: 0o755

  - name: 'Deploy /etc/mariadb-dump.conf'
    ansible.builtin.template:
      src: 'etc/mariadb-dump.conf.j2'
      dest: '/etc/mariadb-dump.conf'
      owner: '{{ mariadb_server__dump_user["username"] }}'
      group: '{{ mariadb_server__dump_user["username"] }}'
      mode: 0o600

  - name: 'Grant backup privileges on dbs.tables to {{ mariadb_server__dump_user["username"] }}@localhost'
    community.mysql.mysql_user:
      login_user: '{{ mariadb_server__admin_user["username"] }}'
      login_password: '{{ mariadb_server__admin_user["password"] if (mariadb_server__admin_user["plugin"] | default("")) != "unix_socket" else omit }}'
      login_unix_socket: '{{ mariadb_server__cnf_socket__combined_var }}'
      name: '{{ mariadb_server__dump_user["username"] }}'
      host: 'localhost'
      plugin: 'unix_socket'
      priv: '{{ mariadb_server__dump_user["priv"] | default(["*.*:event,execute,lock tables,process,reload,replica monitor,select,show databases,show view,slave monitor,super,trigger"]) | join("/") }}'
      state: '{{ mariadb_server__dump_user["state"] | default("present") }}'
    become: '{{ (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" }}'
    become_user: '{{ mariadb_server__admin_user["username"] if (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" else omit }}'

  - name: 'Deploy /etc/systemd/system/mariadb-dump.service'
    ansible.builtin.template:
      src: 'etc/systemd/system/mariadb-dump.service.j2'
      dest: '/etc/systemd/system/mariadb-dump.service'
      owner: 'root'
      group: 'root'
      mode: 0o644

  - name: 'Deploy /etc/systemd/system/mariadb-dump.timer'
    ansible.builtin.template:
      src: 'etc/systemd/system/mariadb-dump.timer.j2'
      dest: '/etc/systemd/system/mariadb-dump.timer'
      owner: 'root'
      group: 'root'
      mode: 0o644
    register: 'mariadb_server__dump_systemd_timer_result'

  - name: 'systemctl enable mariadb-dump.timer --now'
    ansible.builtin.systemd:
      name: 'mariadb-dump.timer'
      state: 'started'
      enabled: true
      daemon_reload: '{{ mariadb_server__dump_systemd_timer_result is changed }}'

  when:
    - 'mariadb_server__dump_user is defined'
    - 'mariadb_server__dump_user | length'
  tags:
    - 'mariadb_server'
    - 'mariadb_server:configure'
    - 'mariadb_server:dump'


# galera
- block:

  - name: 'Deploy {{ mariadb_server__config_file_00 }}'
    ansible.builtin.template:
      src: 'etc/my.cnf.d/{{ mariadb_server__installed_version }}-z00-linuxfabrik.cnf.j2'
      dest: '{{ mariadb_server__config_file_00 }}'
      owner: 'root'
      group: 'root'
      mode: 0o644

  - name: 'Run galera_new_cluster' # noqa no-changed-when
    ansible.builtin.command: 'galera_new_cluster'
    tags:
      - 'mariadb_server'
      - 'mariadb_server:galera_new_cluster'

  when:
    - 'mariadb_server__run_galera_new_cluster is true'
  tags:
    - 'mariadb_server'


# database management
- block:

  - name: 'Combined Databases:'
    ansible.builtin.debug:
      var: 'mariadb_server__databases__combined_var'

  - name: 'Create or delete mariadb databases'
    community.mysql.mysql_db:
      login_user: '{{ mariadb_server__admin_user["username"] }}'
      login_password: '{{ mariadb_server__admin_user["password"] if (mariadb_server__admin_user["plugin"] | default("")) != "unix_socket" else omit }}'
      login_unix_socket: '{{ mariadb_server__cnf_socket__combined_var }}'
      name: '{{ item["name"] }}'
      collation: '{{ item["collation"] | default("utf8_general_ci") }}'
      encoding: '{{ item["encoding"] | default("utf8") }}'
      state: '{{ item["state"] | default("present") }}'
    become: '{{ (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" }}'
    become_user: '{{ mariadb_server__admin_user["username"] if (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" else omit }}'
    loop: '{{ mariadb_server__databases__combined_var }}'
    loop_control:
      label: '{{ item["name"] }}'

  tags:
    - 'mariadb_server'
    - 'mariadb_server:database'


# user management
- block:

  - name: 'Combined Users:'
    ansible.builtin.debug:
      var: 'mariadb_server__users__combined_var'

  - name: 'Create, update or delete MariaDB users'
    community.mysql.mysql_user:
      login_user: '{{ mariadb_server__admin_user["username"] }}'
      login_password: '{{ mariadb_server__admin_user["password"] if (mariadb_server__admin_user["plugin"] | default("")) != "unix_socket" else omit }}'
      login_unix_socket: '{{ mariadb_server__cnf_socket__combined_var }}'
      name: '{{ item["username"] }}'
      host: '{{ item["host"] | default("localhost") }}'
      password: '{{ item["password"] | default(omit) if (item["plugin"] | default("")) != "unix_socket" else omit }}'
      plugin: '{{ item["plugin"] | default(omit) }}'
      tls_requires: '{{ item["tls_requires"] | default(omit) }}'
      priv: '{{ item["priv"] | join("/") if item["priv"] is defined else omit }}'
      state: '{{ item["state"] | default("present") }}'
    become: '{{ (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" }}'
    become_user: '{{ mariadb_server__admin_user["username"] if (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" else omit }}'
    loop: '{{ mariadb_server__users__combined_var }}'
    loop_control:
      label: '{{ item["username"] }}@{{ item["host"] | default("localhost") }}'

  - name: 'Combined Roles'
    ansible.builtin.debug:
      var: 'mariadb_server__roles__combined_var'

  - name: 'Build role to members mapping'
    ansible.builtin.set_fact:
      __mariadb_server__roles2members: '{{ __mariadb_server__roles2members | default({}) | combine({ item["name"]: __mariadb_server__members }) }}'
    vars:
      __mariadb_server__members: >-
        {%- set members = [] -%}
        {%- for user in mariadb_server__users__combined_var -%}
          {%- if (user['state'] | d('present') != 'absent') and (item['name'] in user['roles'] | d([])) -%}
            {%- set _ = members.append(user['username'] ~ '@' ~ user['host'] | default('localhost')) -%}
          {%- endif -%}
        {%- endfor -%}
        {{ members }}
    loop: '{{ mariadb_server__roles__combined_var }}'

  - name: 'Role to Members mapping'
    ansible.builtin.debug:
      var: '__mariadb_server__roles2members'

  - name: 'Create, update or delete MariaDB roles'
    community.mysql.mysql_role:
      login_user: '{{ mariadb_server__admin_user["username"] }}'
      login_password: '{{ mariadb_server__admin_user["password"] if (mariadb_server__admin_user["plugin"] | default("")) != "unix_socket" else omit }}'
      login_unix_socket: '{{ mariadb_server__cnf_socket__combined_var }}'
      name: '{{ item["name"] }}'
      priv: '{{ (item["priv"] | join("/")) }}'
      members: '{{ __mariadb_server__roles2members[item["name"]] }}'
      state: '{{ item["state"] | default("present") }}'
    become: '{{ (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" }}'
    become_user: '{{ mariadb_server__admin_user["username"] if (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" else omit }}'
    loop: '{{ mariadb_server__roles__combined_var }}'
    loop_control:
      label: '{{ item["name"] }}'

  - name: 'SET DEFAULT ROLE `{{ item["default_role"] }}` FOR `{{ item["username"] }}`@`{{ item["host"] | default("localhost") }}`'
    community.mysql.mysql_query:
      login_user: '{{ mariadb_server__admin_user["username"] }}'
      login_password: '{{ mariadb_server__admin_user["password"] if (mariadb_server__admin_user["plugin"] | default("")) != "unix_socket" else omit }}'
      login_unix_socket: '{{ mariadb_server__cnf_socket__combined_var }}'
      query: 'SET DEFAULT ROLE `{{ item["default_role"] }}` FOR `{{ item["username"] }}`@`{{ item["host"] | default("localhost") }}`'
    become: '{{ (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" }}'
    become_user: '{{ mariadb_server__admin_user["username"] if (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" else omit }}'
    loop: '{{ mariadb_server__users__combined_var }}'
    loop_control:
      label: '{{ item["username"] }}@{{ item["host"] | default("localhost") }}'
    when: 'item["default_role"] is defined and item["default_role"] | length'
    changed_when: true # too hard to detect right now, so always report a change

  tags:
    - 'mariadb_server'
    - 'mariadb_server:user'


# sys schema
- block:

  - name: 'Show databases'
    community.mysql.mysql_info:
      login_user: '{{ mariadb_server__admin_user["username"] }}'
      login_password: '{{ mariadb_server__admin_user["password"] if (mariadb_server__admin_user["plugin"] | default("")) != "unix_socket" else omit }}'
      login_unix_socket: '{{ mariadb_server__cnf_socket__combined_var }}'
      filter:
        - 'databases'
      return_empty_dbs: false
    become: '{{ (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" }}'
    become_user: '{{ mariadb_server__admin_user["username"] if (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" else omit }}'
    register: 'mariadb_server__info'

  when:
    - 'not mariadb_server__skip_sys_schema'
  tags:
    - 'mariadb_server'
    - 'mariadb_server:sys_schema'


- block:

  - name: 'curl https://github.com/FromDual/mariadb-sys/archive/refs/heads/master.tar.gz --output /tmp/ansible.mariadb-sys-schema.tar.gz' # noqa risky-file-permissions file on localhost
    ansible.builtin.get_url:
      url: 'https://github.com/FromDual/mariadb-sys/archive/refs/heads/master.tar.gz'
      dest: '/tmp/ansible.mariadb-sys-schema.tar.gz'
    delegate_to: 'localhost'
    changed_when: false # not an actual config change on the server
    check_mode: false # run task even if `--check` is specified

  - name: 'copy /tmp/ansible.mariadb-sys-schema.tar.gz to the server' # noqa risky-file-permissions temporary file
    ansible.builtin.copy:
      src: '/tmp/ansible.mariadb-sys-schema.tar.gz'
      dest: '/tmp/ansible.mariadb-sys-schema.tar.gz'

  - name: 'mkdir /tmp/mariadb-sys-schema' # noqa risky-file-permissions temporary dir
    ansible.builtin.file:
      path: '/tmp/mariadb-sys-schema'
      state: 'directory'

  - name: 'tar xzvf /tmp/ansible.mariadb-sys-schema.tar.gz'
    ansible.builtin.unarchive:
      src: '/tmp/ansible.mariadb-sys-schema.tar.gz'
      dest: '/tmp/mariadb-sys-schema'
      remote_src: true

  - name: 'mysql --user "{{ mariadb_server__admin_user["username"] }}" --password < ./sys_10.sql'
    community.mysql.mysql_db:
      login_user: '{{ mariadb_server__admin_user["username"] }}'
      login_password: '{{ mariadb_server__admin_user["password"] if (mariadb_server__admin_user["plugin"] | default("")) != "unix_socket" else omit }}'
      login_unix_socket: '{{ mariadb_server__cnf_socket__combined_var }}'
      name: 'sys'
      state: 'import'
      target: './sys_10.sql'
      chdir: '/tmp/mariadb-sys-schema/mariadb-sys-master/'
    become: '{{ (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" }}'
    become_user: '{{ mariadb_server__admin_user["username"] if (mariadb_server__admin_user["plugin"] | default("")) == "unix_socket" else omit }}'

  - name: 'rm -rf /tmp/mariadb-sys-schema'
    ansible.builtin.file:
      path: '/tmp/mariadb-sys-schema'
      state: 'absent'

  when:
    - 'not mariadb_server__skip_sys_schema'
    - 'not "sys" in mariadb_server__info["databases"]'
  tags:
    - 'mariadb_server'
    - 'mariadb_server:sys_schema'


- block:

  - ansible.builtin.include_tasks: 'clone-datadir.yml'

  tags:
    - 'mariadb_server'
    - 'mariadb_server:clone_datadir'


- name: 'Flush handlers so that the mariadb can be used by other roles later'
  ansible.builtin.meta: 'flush_handlers'
  tags:
    - 'mariadb_server'
    - 'mariadb_server:configure'
    - 'mariadb_server:database'
    - 'mariadb_server:dump'
    - 'mariadb_server:secure_installation'
    - 'mariadb_server:state'
    - 'mariadb_server:sys_schema'
    - 'mariadb_server:upgrade'
    - 'mariadb_server:user'
