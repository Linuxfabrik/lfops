- block:

  - name: 'Set platform/version specific variables'
    ansible.builtin.import_role:
      name: 'shared'
      tasks_from: 'platform-variables.yml'

  tags:
    - 'monitoring_plugins'
    - 'monitoring_plugins:custom'

- name: 'Clone the monitoring plugins repo'
  ansible.builtin.import_role:
    name: 'shared'
    tasks_from: 'clone-monitoring-plugins-repo.yml'
  vars:
    shared__monitoring_plugins_repo_version: '{{ monitoring_plugins__repo_version }}'
  when:
    - 'ansible_facts["os_family"] != "Windows"
      or monitoring_plugins__windows_variant == "python"'
  tags:
    - 'monitoring_plugins'

- name: 'Generate the monitoring plugins list'
  ansible.builtin.import_tasks: 'generate-monitoring-plugins-list.yml'
  tags:
    - 'monitoring_plugins'

- name: 'Perform platform/version specific tasks'
  ansible.builtin.include_tasks: '{{ lookup("first_found", __task_file) }}'
  vars:
    __task_file:
      files:
        - '{{ ansible_facts["distribution"] }}{{ ansible_facts["distribution_version"] }}.yml'
        - '{{ ansible_facts["distribution"] }}{{ ansible_facts["distribution_major_version"] }}.yml'
        - '{{ ansible_facts["distribution"] }}.yml'
        - '{{ ansible_facts["os_family"] }}{{ ansible_facts["distribution_version"] }}.yml'
        - '{{ ansible_facts["os_family"] }}{{ ansible_facts["distribution_major_version"] }}.yml'
        - '{{ ansible_facts["os_family"] }}.yml'
      paths:
        - '{{ role_path }}/tasks'
  ignore_errors: true # TODO: this probably is a bug in the first_found lookup, according to the doc skip=true should work. else improve the ignore_errors statement
  tags:
    - 'monitoring_plugins'


- block:


  - block:

    - name: 'install {{ monitoring_plugins__versionlock_package }}'
      ansible.builtin.package:
        name:
          - '{{ monitoring_plugins__versionlock_package }}'
        state: 'present'
      when: 'monitoring_plugins__versionlock_package is defined'

    - name: '{{ monitoring_plugins__versionlock_unlock_command }} linuxfabrik-monitoring-plugins'
      ansible.builtin.command: '{{ monitoring_plugins__versionlock_unlock_command }} linuxfabrik-monitoring-plugins'
      ignore_errors: true

    - name: '{{ monitoring_plugins__versionlock_unlock_command }} linuxfabrik-notification-plugins'
      ansible.builtin.command: '{{ monitoring_plugins__versionlock_unlock_command }} linuxfabrik-notification-plugins'
      ignore_errors: true
      when: 'not monitoring_plugins__skip_notification_plugins__combined_var | bool'

    # block
    when:
      - 'not monitoring_plugins__skip_package_versionlock'


  - name: 'install linuxfabrik-monitoring-plugins{{ (monitoring_plugins__repo_version != "latest") | ternary("-" ~ monitoring_plugins__repo_version, "") }}'
    ansible.builtin.package:
      name:
        - 'linuxfabrik-monitoring-plugins{{ (monitoring_plugins__repo_version != "latest") | ternary("-" ~ monitoring_plugins__repo_version, "") }}'
      state: 'latest' # use latest for the versionlock after

  - name: 'install linuxfabrik-notification-plugins{{ (monitoring_plugins__repo_version != "latest") | ternary("-" ~ monitoring_plugins__repo_version, "") }}'
    ansible.builtin.package:
      name:
        - 'linuxfabrik-notification-plugins{{ (monitoring_plugins__repo_version != "latest") | ternary("-" ~ monitoring_plugins__repo_version, "") }}'
      state: 'latest' # use latest for the versionlock after
    when: 'not monitoring_plugins__skip_notification_plugins__combined_var | bool'


  - block:

    - name: '{{ monitoring_plugins__versionlock_lock_command }} linuxfabrik-monitoring-plugins'
      ansible.builtin.command: '{{ monitoring_plugins__versionlock_lock_command }} linuxfabrik-monitoring-plugins'

    - name: '{{ monitoring_plugins__versionlock_lock_command }} linuxfabrik-notification-plugins'
      ansible.builtin.command: '{{ monitoring_plugins__versionlock_lock_command }} linuxfabrik-notification-plugins'
      when: 'not monitoring_plugins__skip_notification_plugins__combined_var | bool'

    # block
    when:
      - 'not monitoring_plugins__skip_package_versionlock'


  # block
  when:
    - 'ansible_facts["os_family"] != "Windows"'
    - 'monitoring_plugins__linux_variant == "package"'
  tags:
    - 'monitoring_plugins'


- name: 'Install the Linux Python Variant'
  ansible.builtin.include_tasks: 'linux-python-variant.yml'
  when:
    - 'ansible_facts["os_family"] != "Windows"'
    - 'monitoring_plugins__linux_variant == "python"'
  tags:
    - 'monitoring_plugins'


- block:

  - name: 'Copy the /etc/sudoers.d/monitoring-plugins file to the server (Linux)'
    ansible.builtin.copy:
      src: '/tmp/ansible.monitoring-plugins-repo/assets/sudoers/{{ ansible_facts["os_family"] }}.sudoers'
      dest: '/etc/sudoers.d/monitoring-plugins'
      mode: 0o640

  - name: 'Make sure the legacy sudoers file is absent'
    ansible.builtin.file:
      path: '/etc/sudoers.d/icinga2-plugins'
      state: 'absent'

  - name: 'Make sure the linuxfabrik plugin cache is removed'
    ansible.builtin.file:
      path: '/tmp/linuxfabrik-plugin-cache.db'
      state: 'absent'

  - name: 'Make sure the database of the check plugin is removed'
    ansible.builtin.command: 'rm -f --{% for item in monitoring_plugins__plugin_list %} /tmp/{{ item }}.db{% endfor %}'
    # this is much faster than using the file module and looping over monitoring_plugins__plugin_list

  # block
  when: 'ansible_facts["os_family"] != "Windows"'
  tags:
    - 'monitoring_plugins'


- block:

  - name: 'mkdir /usr/lib64/nagios/plugins/assets (monitoring.php for php-status)'
    ansible.builtin.file:
      path: '/usr/lib64/nagios/plugins/assets'
      state: 'directory'
      owner: 'root'
      group: 'root'
      mode: 0o755

  - name: 'deploy /usr/lib64/nagios/plugins/assets/monitoring.php (monitoring.php for php-status)'
    ansible.builtin.copy:
      src: '/tmp/ansible.monitoring-plugins-repo/check-plugins/php-status/assets/monitoring.php'
      dest: '/usr/lib64/nagios/plugins/assets/monitoring.php'
      owner: 'root'
      group: 'root'
      mode: 0o644

  - name: 'check if /var/www/html/localhost exists (monitoring.php for php-status)'
    ansible.builtin.stat:
      path: '/var/www/html/localhost'
    register: 'monitoring_plugins__stat_var_www_html_localhost_result'

  - name: 'deploy /var/www/html/localhost/monitoring.php (monitoring.php for php-status)'
    ansible.builtin.copy:
      src: '/tmp/ansible.monitoring-plugins-repo/check-plugins/php-status/assets/monitoring.php'
      dest: '/var/www/html/localhost/monitoring.php'
      owner: 'apache'
      group: 'apache'
      mode: 0o644
    when: 'monitoring_plugins__stat_var_www_html_localhost_result["stat"]["exists"]'

  # block
  when:
    - 'ansible_facts["os_family"] != "Windows"'
    - '"php-status" in monitoring_plugins__plugin_list'
  tags:
    - 'monitoring_plugins'


- block:

  - name: 'Check if custom plugins exist'
    ansible.builtin.stat:
      path: '{{ inventory_dir }}/host_files/{{ inventory_hostname }}/usr/lib64/nagios/plugins'
    delegate_to: 'localhost'
    changed_when: false
    register: 'monitoring_plugins__custom_plugins'

  - name: 'Copy the custom plugins to /usr/lib64/nagios/plugins'
    ansible.builtin.copy:
      src: '{{ inventory_dir }}/host_files/{{ inventory_hostname }}/usr/lib64/nagios/plugins'
      dest: '/usr/lib64/nagios/'
      mode: 'preserve'
      backup: true
    when: 'monitoring_plugins__custom_plugins.stat.exists'

  # block
  when: 'ansible_facts["os_family"] != "Windows"'
  tags:
    - 'monitoring_plugins'
    - 'monitoring_plugins:custom'
