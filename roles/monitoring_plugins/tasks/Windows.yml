- block:

  - name: 'Clone the lib repo'
    ansible.builtin.import_role:
      name: 'shared'
      tasks_from: 'clone-lib-repo.yml'
    vars:
      shared__lib_repo_version: '{{ monitoring_plugins__repo_version }}'

  - name: 'Make sure the plugin directory exists (Windows)'
    ansible.windows.win_file:
      path: 'C:\\ProgramData\\icinga2\\usr\\lib64\\nagios\\plugins\\'
      state: 'directory'

  - name: 'Set a downtime for the host (Windows)'
    ansible.builtin.uri:
      url: '{{ monitoring_plugins__icinga2_api_url }}/actions/schedule-downtime'
      validate_certs: false
      user: '{{ monitoring_plugins__icinga2_api_user }}'
      password: '{{ monitoring_plugins__icinga2_api_password }}'
      force_basic_auth: true
      method: 'POST'
      body: >
        {
          "type": "Host",
          "filter": "host.name==\"{{ monitoring_plugins__icinga2_cn }}\"",
          "start_time": "{{ lookup('pipe', 'date +%s') }}",
          "end_time": "{{ lookup('pipe', 'date +%s') | int + 3600 }}",
          "author": "Ansible Role linuxfabrik.lfops.monitoring_plugins",
          "comment": "Downtime during deployment of the monitoring-plugins",
          "all_services": true
        }
      body_format: 'json'
      status_code: 200
      headers:
        Accept: 'application/json'
    when: '(monitoring_plugins__icinga2_api_url is defined and monitoring_plugins__icinga2_api_url | length)
      and (monitoring_plugins__icinga2_api_user is defined and monitoring_plugins__icinga2_api_user | length)
      and (monitoring_plugins__icinga2_api_password is defined and monitoring_plugins__icinga2_api_password | length)'
    delegate_to: 'localhost'

  - name: 'Stop the Icinga2 service'
    ansible.windows.win_service:
      name: 'Icinga 2'
      state: 'stopped'
    register: 'monitoring_plugins__icinga2_service_stop_result'
    # ignore errors if the service does not exist
    failed_when: 'monitoring_plugins__icinga2_service_stop_result["failed"] is defined and monitoring_plugins__icinga2_service_stop_result["failed"] and not "is not installed" in monitoring_plugins__icinga2_service_stop_result["msg"]'

  tags:
    - 'monitoring_plugins'


- block:

  - name: 'Copy lib for the Linuxfabrik monitoring plugins (Windows)'
    ansible.windows.win_copy:
      src: '{{ item }}'
      dest: 'C:\ProgramData\icinga2\usr\lib64\nagios\plugins\lib\'
    with_fileglob:
      - '/tmp/ansible.lib-repo/*.py'

  - name: 'Copy the Linuxfabrik monitoring plugins (Windows)'
    ansible.windows.win_copy:
      src: '/tmp/ansible.monitoring-plugins-repo/check-plugins/{{ item }}/{{ item }}'
      dest: 'C:\\ProgramData\\icinga2\\usr\\lib64\\nagios\\plugins\\{{ item }}.py'
    loop: '{{ monitoring_plugins__plugin_list }}'

  # block
  when: 'monitoring_plugins__windows_variant == "python"'
  tags:
    - 'monitoring_plugins'


- block:

  - name: 'Download the Linuxfabrik monitoring plugins (Windows)'
    ansible.builtin.get_url:
      url: 'https://download.linuxfabrik.ch/monitoring-plugins/windows/linuxfabrik-monitoring-plugins-{{ monitoring_plugins__repo_version }}.zip'
      dest: '/tmp/ansible.{{ monitoring_plugins__repo_version }}.zip'
    delegate_to: 'localhost'
    check_mode: false # run task even if `--check` is specified

  - name: 'Copy the Linuxfabrik monitoring plugins (Windows)'
    ansible.windows.win_copy:
      src: '/tmp/ansible.{{ monitoring_plugins__repo_version }}.zip'
      dest: 'C:\\ProgramData\\icinga2\\usr\\lib64\\nagios\\plugins\\{{ monitoring_plugins__repo_version }}.zip'

  - name: 'Unzip the Linuxfabrik monitoring plugins (Windows)'
    community.windows.win_unzip:
      src: 'C:\\ProgramData\\icinga2\\usr\\lib64\\nagios\\plugins\\{{ monitoring_plugins__repo_version }}.zip'
      dest: 'C:\\ProgramData\\icinga2\\usr\\lib64\\nagios\\plugins\\'

  - name: 'Remove the zip file (Windows)'
    ansible.windows.win_file:
      path: 'C:\\ProgramData\\icinga2\\usr\\lib64\\nagios\\plugins\\{{ monitoring_plugins__repo_version }}.zip'
      state: 'absent'

  # block
  when: 'monitoring_plugins__windows_variant == "nuitka"'
  tags:
    - 'monitoring_plugins'


- block:

  - name: 'Remove the downtime for the host (Windows)'
    ansible.builtin.uri:
      url: '{{ monitoring_plugins__icinga2_api_url }}/actions/remove-downtime'
      validate_certs: false
      user: '{{ monitoring_plugins__icinga2_api_user }}'
      password: '{{ monitoring_plugins__icinga2_api_password }}'
      force_basic_auth: true
      method: 'POST'
      body: >
        {
          "type": "Downtime",
          "filter": "host.name==\"{{ monitoring_plugins__icinga2_cn }}\" && downtime.author==\"Ansible Role linuxfabrik.lfops.monitoring_plugins\""
        }
      body_format: 'json'
      status_code: 200
      headers:
        Accept: 'application/json'
    when: '(monitoring_plugins__icinga2_api_url is defined and monitoring_plugins__icinga2_api_url | length)
      and (monitoring_plugins__icinga2_api_user is defined and monitoring_plugins__icinga2_api_user | length)
      and (monitoring_plugins__icinga2_api_password is defined and monitoring_plugins__icinga2_api_password | length)'
    delegate_to: 'localhost'
    ignore_errors: true # we still want to start the icinga2 service again

  - name: 'Start the Icinga2 service'
    ansible.windows.win_service:
      name: 'Icinga 2'
      state: 'started'
    register: 'monitoring_plugins__icinga2_service_start_result'
    # ignore errors if the service does not exist
    failed_when: 'monitoring_plugins__icinga2_service_start_result["failed"] is defined and monitoring_plugins__icinga2_service_start_result["failed"] and not "is not installed" in monitoring_plugins__icinga2_service_start_result["msg"]'

  tags:
    - 'monitoring_plugins'
