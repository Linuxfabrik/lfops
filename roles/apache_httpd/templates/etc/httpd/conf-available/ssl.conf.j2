# {{ ansible_managed }}
# 2022010101
{% if item['by_role'] | d() %}
# Generated by Ansible role: {{ item['by_role'] }}
{% endif %}

# ssl_module
# Read this: https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices

Listen 443 https

SSLCryptoDevice builtin

# The cipher suites are all strong and so we allow the client to choose, as they will know best
# if they have support for hardware-accelerated AES.
# If this is set to "off", https://observatory.mozilla.org/analyze/ > TLS Observatory can't
# identify a compatibility level (nothing to worry about, just a display issue).
SSLHonorCipherOrder off

# SSLPassPhraseDialog exec:/usr/libexec/httpd-ssl-pass-dialog # file '/usr/libexec/httpd-ssl-pass-dialog' does not exist
SSLRandomSeed connect builtin
SSLRandomSeed startup file:/dev/urandom  1024
SSLSessionCache shmcb:/run/httpd/sslcache(512000)
SSLSessionCacheTimeout  1800

# ensures Perfect Forward Secrecy is not compromised if the server is not restarted regularly:
SSLSessionTickets off

# OCSP Stapling, only in httpd 2.3.3 and later
SSLUseStapling on
SSLStaplingCache shmcb:/var/run/ocsp(128000)
SSLStaplingResponderTimeout 3
SSLStaplingReturnResponderErrors off

# https://ssl-config.mozilla.org

# https://ssl-config.mozilla.org/#server=apache&version=2.4.48&config=modern&openssl=1.1.1k
# Supports Firefox 63, Android 10.0, Chrome 70, Edge 75, Java 11, OpenSSL 1.1.1, Opera 57, and Safari 12.1
# Attention: If you disable TLSv1.2 as recommended, check_http or curl will not be able to
# establish a connection by default
SSLProtocol -all +TLSv1.2 +TLSv1.3

# Due to the required compatibility with TLS v1.2, we have to define the SSLCipherSuite as an exception
# (while moz://a does not do this for the "modern config" - TLS 1.3 removed obsolete/insecure
# features like cipher suites, compression etc.).
# But instead of using the output from moz://a SSL Configuration Generator for TLS 1.2, the cipher suites are
# manually sorted by order (best key exchange algorithm/strongest encryption first).
# This is done even if client chooses its favorite algorithm, because that's the only way to get an
# even better number of points in "Key Exchange" on https://www.ssllabs.com/ssltest.
SSLCipherSuite ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256

# ==> Due to +TLSv1.2 and SSLCipherSuite this is an intermediate TLS config again.


# https://ssl-config.mozilla.org/#server=apache&version=2.4.6&config=intermediate&openssl=1.0.2k
# Supports Firefox 27, Android 4.4.2, Chrome 31, Edge, IE 11 on Windows 7, Java 8u31, OpenSSL 1.0.1, Opera 20, and Safari 9
# SSLProtocol -all +TLSv1.2
# But instead of using the output from moz://a SSL Configuration Generator for TLS 1.2, the cipher suites are
# manually sorted by order (best key exchange algorithm/strongest encryption first, according
# to https://www.acunetix.com/blog/articles/tls-ssl-cipher-hardening/).
# This is done even if client chooses its favorite algorithm, because that's the only way to get an
# even better number of points in "Key Exchange" on https://www.ssllabs.com/ssltest.
# SSLCipherSuite ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256

{{ item['raw'] | d() }}
