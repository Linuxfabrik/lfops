# If names and settings differ across OS families, you can handle it with distribution or OS family
# specific vars files.
# https://redhat-cop.github.io/automation-good-practices/#supporting-multiple-distributions-and-versions

# The files in the loop are in order from least specific to most specific:
# * os_family covers a group of closely related platforms (e.g. RedHat covers RHEL, CentOS, Fedora)
# * distribution (e.g. Fedora) is more specific than os_family
# * distribution_distribution_major_version (e.g. RedHat8) is more specific than distribution
# * distribution_distribution_version (e.g. RedHat8.3) is the most specific

- name: 'Set platform/version specific variables'
  ansible.builtin.include_vars: '{{ __vars_file }}'
  loop:
    - '{{ ansible_facts["os_family"] }}.yml'                                                     # "RedHat.yml"
    - '{{ ansible_facts["os_family"] }}{{ ansible_facts["distribution_major_version"] }}.yml'    # "RedHat7.yml"
    - '{{ ansible_facts["os_family"] }}{{ ansible_facts["distribution_version"] }}.yml'          # "RedHat7.3.yml"
    - '{{ ansible_facts["distribution"] }}.yml'                                                  # "CentOS.yml"
    - '{{ ansible_facts["distribution"] }}{{ ansible_facts["distribution_major_version"] }}.yml' # "CentOS7.yml"
    - '{{ ansible_facts["distribution"] }}{{ ansible_facts["distribution_version"] }}.yml'       # "CentOS7.3.yml"
  vars:
    __vars_file: '{{ ansible_parent_role_paths[0] }}/vars/{{ item }}'
  when: '__vars_file is file'
