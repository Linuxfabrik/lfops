- block:

  - name: 'Install graylog-server'
    ansible.builtin.package:
      name:
        - 'graylog-server'
      state: 'present'

  tags:
    - 'graylog_server'


- block:

  - name: 'Set platform/version specific variables'
    ansible.builtin.import_role:
      name: 'shared'
      tasks_from: 'platform-variables.yml'

  - name: 'Get the list of installed packages'
    ansible.builtin.package_facts:  # yamllint disable-line rule:empty-values
    check_mode: false # run task even if `--check` is specified

  - name: 'Get Graylog version'
    ansible.builtin.set_fact:
      graylog_server__installed_version: '{{ ansible_facts["packages"]["graylog-server"][0]["version"] | regex_replace("\.\d+$", "") }}'

  - name: 'Deploy /etc/graylog/server/server.conf (version: {{ graylog_server__installed_version[:3] }})'
    ansible.builtin.template:
      src: 'etc/graylog/server/{{ graylog_server__installed_version[:3] }}-server.conf.j2'
      dest: '/etc/graylog/server/server.conf'
      owner: 'graylog'
      group: 'graylog'
      mode: 0o644
    notify: 'graylog: restart graylog-server'

  - name: 'Remove rpmnew / rpmsave (and Debian equivalents)'
    ansible.builtin.include_role:
      name: 'shared'
      tasks_from: 'remove-rpmnew-rpmsave.yml'
    vars:
      shared__remove_rpmnew_rpmsave_config_file: '/etc/graylog/server/server.conf'

  - name: 'Deploy {{ graylog_server__opts_file }}'
    ansible.builtin.template:
      src: '{{ graylog_server__opts_file[1:] }}.j2'
      dest: '{{ graylog_server__opts_file }}'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'graylog: restart graylog-server'

  tags:
    - 'graylog_server'
    - 'graylog_server:configure'


- block:

  - name: 'systemctl {{ graylog_server__service_enabled | bool | ternary("enable", "disable") }} --now graylog-server.service'
    ansible.builtin.systemd:
      name: 'graylog-server.service'
      enabled: '{{ graylog_server__service_enabled }}'
      state: '{{ graylog_server__service_enabled | bool | ternary("started", "stopped") }}'

  tags:
    - 'graylog_server'
    - 'graylog_server:state'


- block:

  - name: 'Wait for port {{ graylog_server__http_bind_port }} to become open on the host'
    ansible.builtin.wait_for:
      host: '{{ graylog_server__http_bind_address }}'
      port: '{{ graylog_server__http_bind_port }}'
      delay: 5

  - name: 'Check for Graylog first-time startup message in server.log'
    ansible.builtin.command: 'grep -A 2 "Initial configuration is accessible" /var/log/graylog-server/server.log'
    register: 'graylog_startup_check'
    ignore_errors: true

  - name: 'Graylog first-time startup message:'
    ansible.builtin.debug:
      var: 'graylog_startup_check.stdout_lines'
    when: 'graylog_startup_check.rc == 0'

  tags:
    - 'graylog_server'


- block:

  - name: 'Get all inputs'
    ansible.builtin.uri:
      url: 'http://{{ graylog_server__http_bind_address }}:{{ graylog_server__http_bind_port }}/api/system/inputs'
      user: '{{ graylog_server__root_user["username"] }}'
      password: '{{ graylog_server__root_user["password"] }}'
      method: 'GET'
      force_basic_auth: true
      # status_code: 200
    register: 'graylog_server__input_result'
    changed_when: false # no actual config change
    check_mode: false # run task even if `--check` is specified

  - name: 'Graylog inputs:'
    ansible.builtin.debug:
      var: 'graylog_server__input_result.json.inputs'

  - name: 'Terminate input on this node'
    ansible.builtin.uri:
      url: 'http://{{ graylog_server__http_bind_address }}:{{ graylog_server__http_bind_port }}/api/system/inputs/{{ item }}'
      user: '{{ graylog_server__root_user["username"] }}'
      password: '{{ graylog_server__root_user["password"] }}'
      method: 'DELETE'
      force_basic_auth: true
      status_code: 204
      headers:
        X-Requested-By: 'cli'
    loop: '{{ graylog_server__input_result | community.general.json_query("json.inputs[*].id") }}'
    when:
      - 'graylog_server__is_leader | bool' # only run this against one host, else we get duplicate inputs
      - 'graylog_server__input_result.json.inputs is defined and graylog_server__input_result.json.inputs | length'

  - name: 'Launch input on this node'
    ansible.builtin.uri:
      url: 'http://{{ graylog_server__http_bind_address }}:{{ graylog_server__http_bind_port }}/api/system/inputs'
      user: '{{ graylog_server__root_user["username"] }}'
      password: '{{ graylog_server__root_user["password"] }}'
      method: 'POST'
      body: '{{ item | to_json }}'
      force_basic_auth: true
      status_code: 201
      body_format: 'json'
      headers:
        Accept: 'application/json'
        X-Requested-By: 'cli'
    loop: '{{ graylog_server__system_inputs__combined_var }}'

  tags:
    - 'never'
    - 'graylog_server:configure_inputs'


- block:

  - name: 'Get a list of all index sets'
    ansible.builtin.uri:
      url: 'http://{{ graylog_server__http_bind_address }}:{{ graylog_server__http_bind_port }}/api/system/indices/index_sets'
      user: '{{ graylog_server__root_user["username"] }}'
      password: '{{ graylog_server__root_user["password"] }}'
      method: 'GET'
      force_basic_auth: true
      # status_code: 200
    register: 'graylog_server__get_index_sets_result'
    changed_when: false # no actual config change
    check_mode: false # run task even if `--check` is specified

  - name: 'Create index sets'
    ansible.builtin.uri:
      url: 'http://{{ graylog_server__http_bind_address }}:{{ graylog_server__http_bind_port }}/api/system/indices/index_sets'
      user: '{{ graylog_server__root_user["username"] }}'
      password: '{{ graylog_server__root_user["password"] }}'
      method: 'POST'
      body: '{{ item | to_json }}'
      force_basic_auth: true
      # status_code: 200
      body_format: 'json'
      headers:
        Accept: 'application/json'
        X-Requested-By: 'cli'
    loop: '{{ graylog_server__system_index_sets__combined_var }}'
    loop_control:
      label: '{{ item["index_prefix"] }}'
    when: "graylog_server__get_index_sets_result | community.general.json_query(\"json.index_sets[?index_prefix==`\" ~ item['index_prefix'] ~ \"`].id\") | length == 0"

  - name: 'Get a list of all index sets'
    ansible.builtin.uri:
      url: 'http://{{ graylog_server__http_bind_address }}:{{ graylog_server__http_bind_port }}/api/system/indices/index_sets'
      user: '{{ graylog_server__root_user["username"] }}'
      password: '{{ graylog_server__root_user["password"] }}'
      method: 'GET'
      force_basic_auth: true
      # status_code: 200
    register: 'graylog_server__get_index_sets_result'
    changed_when: false # no actual config change
    check_mode: false # run task even if `--check` is specified

  # - name: 'Set default index set'
  #   ansible.builtin.uri:
  #     url: "http://{{ graylog_server__http_bind_address }}:{{ graylog_server__http_bind_port }}/api/system/indices/index_sets/{{ graylog_server__get_index_sets_result | community.general.json_query(\"json.index_sets[?index_prefix==`\" ~ graylog_server__system_default_index_set['index_prefix'] ~ \"`].id\") | regex_replace(\"\\[\\'|\\'\\]\", \"\") }}/default"
  #     user: '{{ graylog_server__root_user["username"] }}'
  #     password: '{{ graylog_server__root_user["password"] }}'
  #     method: 'PUT'
  #     force_basic_auth: true
  #     # status_code: 200
  #     headers:
  #       X-Requested-By: 'cli'
  #   when: "graylog_server__get_index_sets_result | community.general.json_query(\"json.index_sets[?index_prefix==`\" ~ graylog_server__system_default_index_set['index_prefix'] ~ \"`].id\") | length > 0"

  when:
    - 'graylog_server__is_leader | bool' # only run this against one host, else we get duplicate inputs
  tags:
    - 'never'
    - 'graylog_server:configure_index_sets'
